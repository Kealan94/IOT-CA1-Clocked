Clocked Design Document
Introduction
Clocked will be a one or more physical IoT device per business premises and webapp accessible through the internet. Our current focus and Minimum Viable Product (MVP) is to have it work with one device per business premises with scalability being a “should have”.

The device itself in short: will be a touchscreen display for inputting credentials and display current time and feedback on successful or unsuccessful clock and login attempts. The device will also include a Raspberry Pi, we will be testing with the Zero and 4. Preference is for the Zero as it would mean less cost.
These two physical devices will be grouped and called “the device” or “the clock machine”. On the backend they will be connected to an AWS server which will act as a webserver and interact with the SQL database. The webapp will be accessible from anywhere with internet and information will be given on a need-to-know basis. Managers accounts will differ from employees for example. With the webapp employees can check their rota, managers and payroll can check attendance.

The Team
Our group name is Sundial to keep with the theme of time keeping. The work for this project will be delegated as follows:

Sean Stephens (UI , UX and Frontend)
// {Sean}Brief description of role
My Role in this project is to design the User Interface and to define what the users experience will be when using this system, along with who will be accessing the system and where.

Ciaran Brennan (IoT, Hardware)
// {Ciaran}Brief description of role
My role in the project is to ensure all the hardware works toegther and is able to perform it's intended purposes.

Desmond Madden (Testing of System, Software, Security and UX)
// {Desmond}Brief description of role
My role in this project is to test the System, Software, Security and UX of the device and app and provide feedback and possible solutions to the relevant roles.

Kealan Crilly (System Architect)
// {Kealan}Brief description of role Description of role
I am the system architect for this project and my role will be involved with the design of the technical infrastructure for the project and the acquiring of the hardware and installation of software involved for this project. 
Finbar Thornton {Backend, Database and Server}
My role will involve programming and designing the backend logic the device will use to communicate with the server and the server with the device, how that data will be stored and ensuring security of the data.


IOT HARDWARE
I am Ciaran and my focus on this project will primarily be the IOT hardware. The components we will be using for Clocked in a pi, a NFC(Near Field Communication) sensor and a screen. NFC technology is used worldwide in everyday life such as tapping a debit card off the card machine to pay for your groceries or using apple pay and google wallet. NFC has a range of 4cm and uses two electronic devices. I bought the raspberry pi4 model B 4GB for 78£ along with all the necessary equipment from *Insert link* along with the sensor called the NFC HAT for £13.50 from *Insert link* and we haven’t yet fully decided on which screen we are going to acquire. The pi4 and the sensor has arrived. Phones support NFC so in our project we will try add a virtual NFC card to the app so that an employee can tap it against the sensor whenever he/she arrives into work and leaves it. NFC is generally very reliable as it doesn’t require internet and only needs to devices that support it, NFC is also very quick to use as all it takes is a quick hand motion. Issues that may affect this method of clocking in is that if there is no power the raspberry pi will not work, another issue is that an employee may forget their phone which means they would be unable to use NFC. In terms of the hardware we have got the raspberry pi is very reliable as it can be ran none stop for long periods of time, I haven’t yet got a chance to test the reliability of the NFC sensor as it only came in during this week. The raspberry pi will be powered using a standard power supply with 5.1 voltage and a 2.5A current plugged into a socket on the wall. The device when it is put together will be able to tell the time, know if an employee is clocked in to work or is clocking out and it will have to be able to allow an employee to clock in manually if there is an issue with the NFC. In this project I hope to be able to work all the devices in a proper manner and be able to make them work together, I will have to connect the NFC sensor to the pi in order for the pi to know if a user has clocked in or out, I will connect the screen to the raspberry pie using a HDMI so you can see feedback from the screen to say you have successfully clocked in. I will have to learn how the NFC sensor works and if the pi is compatible with the screen.

System{Kealan}
// Talk about the system as a whole, not in as much detail as others topic but enough to have an understanding of the logical layout.
At the end include the work you will be doing.

System Architect
The system itself
The system itself is a touchscreen display for the users of it to be able to input their own credentials to clock in and out of work. The response from the screen displays a success or failure. A success gives a green arrow and tick, a failure shows a red x error and denies access to the user. This is the core part of the user experience and user interface of the system. It is what the user will see and feel when they go to carry out their intended task of clocking in. It is important and often understated within systems because a nice clean easy and efficient interface and experience for a user means they themselves are more willing and happier to continue to use the system due to the ease with which they can perform their task.
Beyond this screen other components of the system are the database which stores the information of the users of the system. The database itself can be updated and changed in keeping up to date with new users or users leaving the system for whatever reason. Security of the data in the database is of utmost importance and must be kept as secure as possible to ensure the confidentiality and integrity of information about each user is kept private. Another part of the overall system itself is the web server. The web server is needed to transfer data over the internet and provides a connection with the database as well as connect to the device the user has such as a phone or tablet.

The next part of the system that is in this project is the sensors. Sensors located on the touchscreen display to notify the user that their access to the building with their phone or tablet has been a success or failure. In turn these sensors connect with the terminal and server so the information can be processed and transferred over the internet. The sensors are part of the NFC, which are on the Pi that we shall be using for this project. Not forgetting the testing of the system. Rigorous testing is going to be carried out on this system throughout the development stages. Testing in essence to break the system repeatedly until updates and tweaks can be made to make the system as reliable as possible. Such tests taking place are acceptance testing, unit testing and integration testing. Acceptance testing lets the system fail repeatedly until it works. Unit testing gives us the chance to focus on a subset of the system such as individual parts and only conduct tests in that area. Integration testing takes these individual parts and brings them together for testing. The Integration testing shall be done after the unit tests have completed.

System Architecture Diagram
Below is the system architect diagram which is intended to give a more visual depiction of how they system will operate and how the different hardware shall carry out tasks and processes. 
(Image of  System Diagram goes here)

The work that I shall be carrying out as the system architect is not only the installing of software and setting up of hardware, but I will be managing the overall system as to how it progresses forward at each stage of this project. This means that I can keep a close eye on the system as a whole and make changes or tweaks to a piece of software or find better use for hardware that less problems can occur. Further to my work I must ensure and continue to see that constant engagement and feedback is continuous and up to date with each member of the team in my group. Using this method gives us as a team and the project itself a higher chance of being a success at the end of the project.
  

Backend, Server & Database
The backend of the system will consist of Python, PubNub, AWS and SQL.
Python will be used for the logic on the Pi, receiving and handling NFC data from the NFC sensor as stated above. In the event the device loses power and restarts, a cron job will @reboot to begin the program again to listen to the NFC sensor. A possible approach is using system to run the program from device start-up as a daemon in the background although I only know this in theory. This may be preferred as cron is only accurate to the minute, while an NFC reader needs to be accurate to the second at most.

This NFC data will include a string unique to that employee. The minimum to have the process working is to use the employees primary key as the id, while the preferred method would be to use a separate string id. So, the SQL databases primary key isn’t exposed to the outside. For added security this id could change every day or week requiring the employee to sign into the webapp on their phone to receive the current required NFC. Although in researching this, I don’t think it is easily implementable to have a webapp write an NFC on a phone, especially for non-Android.

From the Pi, the data will be sent to the AWS webserver using PubNub. PubNub has a global messaging layer they call the “Data Stream Network”, its used for real-time, close to instant data transmission. Like chat messages or in our case, sensor readings. We will use their API to send our data from the Pi to the webserver. PubNub will encrypt this data so its sent securely, in real-time. Which is important for our product as an employee doesn’t want to clock in and wait more than five seconds to know they can start work.

Once this data reaches the AWS webserver it will then be stored in the SQL database, also hosted by AWS. Then depending on the data received the webserver will send a response to that device display and to the employee’s smartphone. The webserver will run on a free AWS tier, it will be written with Flask, which is a web library for Python. Flask will handle all logic on the server including interactions with the database. This includes logging in from the webapp, making sure only the people who need to see certain pages and data, see it. For example, payroll staff need to see more than a regular employee whose only use of the product is to clock in and check their rota. Sessions will be kept using cookies with Pythons flask-session dependency.

Speaking of rota a “would like to have”, would be when a change happens in the rota or a new rota is added. The system could email the relevant employees letting them know of the change. As it can’t be expected the employee will login to the webapp to check their rota every day. With this there would need to be a confirmation email to lock in the email account for it to receive rota updates. That way bary@gmail.com isn’t getting barry@gmail.com’s rota.
Although I trust AWS to keep the data secure in their database, its preferred to have all data encrypted, including password hashes. Then in the event of a data breach of the database it lessens the damage. For example, SQL injection to receive all of a table’s data. This kind of attack will be avoided through data sanitizing at all points of user input, but nothings certain with security.

More steps towards better security will be password requirements. The standard is 15 characters, alphanumeric with special characters but on a UX level this may only receive pushback from employees not wanting to remember that an in-turn writing it down somewhere. So, our approach will be to allow any user to have a password of that length or longer, but only require higher level accounts to have it. Such as managers and payroll. Regular employees will minimum will be 7 characters of alphanumeric upper and lowercase letters, they will be allowed to make their password as long and difficult as they so please. If either type of staff attempts to create a password below the requirements of their type, the webapp will inform them of the minimum requirements and that they currently do not meet them.
The database will be relational as the data itself is relational. An NFC relates to an employee which relates to a rota which relates to a company.
[clocked_schema image]

Table: User
id will be the primary key for the user. Firstname, lastname and pass are self-explanatory. Password security was defined earlier. Type will be the type of user it is. Be it a “Manager”, “Employee” etc. This will help in deciding level of access. Nfc will be the string the user will use to connect to the reader. Company_id is the foreign key to show what company the user is in. The user will also have an email I forgot to add to the schema, it would be a varchar.

Table: Company
id will be the primary key for the company, name, address and phone are self-explanatory. User_count is the amount of users with that company_id, in that company.



Table: Attendance
Id is the primary key for the attendance record. Nfc is the string the user used to connect to the device. Timestamp is the time and date the user connected. Type is whether it was a clock for “In, Out, Break”. User_id and company_id are foreign keys.
Table: Rota
Id is the primary key for the rota. Day is the day of the week, start is the starting time, end is the clocking out time, status is whether they are currently “In, Out, Break of Absent”. Company_id and user_id are foreign keys.



User Interface{Sean}
//
The core task of this system is to allow the user to clock in and to clock out for work. This will be the main means to judge whether this project has been successful. The project will contain many other features which 
will also be used to judge of the system has been a success. This system will be used in workplaces, which of course involves a large scope of users, ranging from those who will easily adapt to a new system, to those 
who will have major difficulty adapting to a new system.
//
{images 1,2,3}
//
The system will be an app on the users phone, and there will also be a web app version available, which will be mainly used by more authorized users than the basic staff. Above we can see the interface that the employee 
will be faced with when they are simply clocking in and clocking out. From left to right we have the Start up screen of the app, the screen a user will be presented with when they clock in and the screen that the user 
will be presented with when they clock out.
//
The system will have a ‘failsafe’ which is the Sign In option, which is also displayed on the examples above. This allows the user to enter their User ID and Password if the nfc / contactless system malfunctions for any 
reason. When the user clicks the Sign In button they will be presented with this screen.
//
{images 4,5}
//
The use of this failsafe ensures that the system will never be completely down for the company in terms of the main core functionality.
//
Each of these screens shown so far are using the blank template that each system will make use of when initially installed by a company. This is because there will be a number of color templates and schemes, as shown 
above, that the company can choose from to suit their branding.
//
The web app will follow a very similar layout to the mobile app, in that it will be simplistically structured and so easy to follow. It will also have the same color template system which allows customization / personalization 
for each company. The web app will have differing levels of access for different levels of staff, for example, a manager will be able to view the whole Rota along with the abilities to create a new Rota and clock employees in 
or out. Whereas a regular employee will only be able to see their own hours for the week and will only have the ability to view their current status on the app, in terms of whether they are clocked in or not.
//
Basic Manager / Supervisor View
//
{image 6}
//
This is the view that the manager or supervisors will have when they initially log in to the CLOCKED web app, from here they can view the staff of the shop, where they can either add a new member of staff, remove a member of 
staff who has left the company or they can edit a current staff member. For instance if a member of staff has forgot their phone, thy may need the supervisor to clock them in, which they can do using the edit staff feature as shown below;
//
{image 7}
//
The managers and supervisors can also view the current Rota. The manager however can view the Rota for any week and can edit any future Rota’s as we can see below. The current Rota is displayed in a table format, with three options below 
it. The manager can edit the current Rota, in terms of if someone is off sick, they can filter the list to see who has the most hours or who is in on each day etc. They can also select which weeks Rota they can view. E.g. if they view 
next weeks Rota they can then edit the list from there which allows them to insert all of the relevant staff and their hours.
//
{image 8}
//
The system will also be displayed on a smart tablet which will be in the vicinity of the nfc scanner. This will be used to give the user additional feedback when they do clock in or clock out, to further prevent any confusion associated 
with the system. The tablet will be using the same app as what the employees will be using on their mobile phones.
//
I have decided that the system should be kept easy to follow with clearly labelled menus and information that is well spaced out, due to the variety of users that will be using the system.
//
Over the coming weeks I will be further fledging out the UI and will be deciding upon the finished color schemes, along with the precise levels of access that each level of user will be permitted to access. I will also have to ensure that 
there is no way the system can become stuck or can break down depending on user input, for this I will have to work closely with Desmond who is carrying out the testing on the system.
//

Testing{Desmond}
// Pretty much a repeat of the presentation with as much more detail as you want, include how you’ll test, what you’ll test. Security testing. Like Enda brought up, testing from the Managers perspective, its assumed the employee can’t be trusted but not the manager, we should change that. At the end include the work you will be doing.
For this project, we'll have to do multiple waves of testing, doing unit-testing, integration, and performance/system tests, and then finally user acceptance at the end from both parties (the Employee and the Manager) perspectives. 
So using an AGILE testing methodology would be best as it would mean that we are continuously testing what we are currently doing.
{AGILE image}
This is to make sure the code is working as it should and that it is properly connected and interacting with the other features, such as the terminal, the webserver, and the database, with as few errors or problems that we can.
Unit-Testing is a way of testing a small segment of code isolated away from the rest of the app, be that a function, method, subroutine, or property, to confirm that it can be executed properly without relying on others.
Anytime a change is made to the code, new unit testing will need to be conducted to ensure that it hasn't negatively affected the current build of the system and so any unknown issues are resolved efficiently and promptly.
Integration is when we start putting all the code together and testing them as a group instead of individually Unit-Testing them. This is to make sure nothing interferes with other parts of the system unless we have purposefully aimed to make it that way.
The performance or System Testing is when, after integration is all sorted, we put the system under various workloads to test its response time, speed, resource usage, and other aspects that might affect the system's overall performance.
During this, I'll also be testing the security of various aspects of the system, trying to break it and or find vulnerabilities, and regularly providing feedback to those in the relevant roles. 
For this, I'll be researching and hopefully using the Operations Security (OPSEC) methodology. OPSEC is a 5-Step process in which I must identify critical information, analyze the threat, analyze the vulnerability, access the risks, and then apply the appropriate countermeasures. In regards to the system security, notable prioritizing securing the NFC and database aspects of it.
{OPSEC image}
After all the previous test phases are completed, then we can start doing User Acceptance Testing. This is the final phase to be done. This is where we have to get users, most likely friends and or family, to test the system from both employee and manager views and see if they can complete several tasks in emulated scenarios similar to the environment of its intended use. 
The system must be as easy to use and efficient as possible. We'd need to observe and take note of where the users are clicking or tapping, how they feel about the size, position, and colour of features on the app and webpages.


Personas and Use Cases {Anyone}
// 5 Personas(5 Use cases): Employee (Everything works), Employee (Forgot their phone and password), Employee(New employee being added to the system), Payroll(Adding someone who can’t get clocked in), Manager(Checking on who is in and who is late)

USE CASE
Sarah is 20 year old employee in the retail shop who would be quite adept with technology. Sarah is a part time worker who has to work at least 3 days a week, she has had no issues with the clocking in system and it has been using it for 2 months, so Sarah finds the new clocking system much less hassle than any other she has used before.


Use Case Persona
Employee - James
An example of a user of the system is James who is an employee at the retail store that uses the clocked system. 
James cannot clock in as he has forgotten his phone and password that contains his login details so he will have to 
go to the manager’s office and request to be logged in manually. There will be no issue with this as James details 
as an employee and his hours are stored and kept safe in the database.

Manager - Frank

56 year old Man who has been working in the retail sector for 30 years. He is very open to the idea of CLOCKED and has been using the system happily for a number of weeks

Frank is the manager of the shop and wants to know who is in work and who is absent. To do this he logs into the CLOCKED web app, and goes to the View Staff menu option. Which allows him to view all current workers in the shop. The CLOCKED
system shows that one of his workers is absent from work without making him aware that she would be absent. He gets her phone number from his files to contact her and resolves the issue.







